server:
  port: 8081
  servlet:
    context-path: /
    encoding:
      charset: utf-8
      enabled: true

spring:
  security:
    oauth2:
      client:
        registration:
          facebook:
            client-id: 2704971909812622
            client-secret: 8fc011e1d045d44a932f9b4ea3e56799
            scope:
              - public_profile
              - email
          google:
            client-id: 975792662557-jmsj7oatn25sj6k9o21eqdk9dl64e16s.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
          naver:
            client-id: ssHJWrtmTcfIixvcqcNH
            client-secret: J6iuz7ho6L
            redirect-uri: "http://woongil.iptime.org:8081/login/oauth2/code/naver" # (== http://localhost:8080/login/oauth2/code/naver)
            authorization-grant-type: authorization_code
            scope: name, email, profile_image
            client-name: Naver
          kakao:
            client-id: 9a9c2e13d349f8f0e08ac9d88e0fb39a
            redirect-uri: "http://woongil.iptime.org:8081/login/oauth2/code/kakao" # http://localhost:8080/login/oauth2/code/kakao
            client-authentication-method: POST
            authorization-grant-type: authorization_code
            scope: profile_nickname, profile_image, account_email
            client-name: Kakao

        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response
          kakao:
            authorization_uri: https://kauth.kakao.com/oauth/authorize
            token_uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user_name_attribute: id
    user:
      name: test
      password: 1234
#  security:
#    user:
#      name: test
#      password: 1234

  mvc:
    view:
      prefix: /WEB-INF/views/
      suffix: .jsp
  servlet: # this servlet must be at spring zone, no server zone
    multipart:
        enabled: true
        max-file-size: 1000MB
        max-request-size: 1000MB
        file-size-threshold: 1MB
        location: D:/Temp

# 마리아 DB 설정
#  datasource:
#    driver-class-name: org.mariadb.jdbc.Driver
#    url: jdbc:mariadb://192.168.0.100:3307/photogram?serverTimezone=Asia/Seoul
#    username: cos
#    password: cos1234

# MySQL8 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/photogram?serverTimezone=Asia/Seoul
    username: cos
    password: cos1234
# MySQL8 설정

  jpa:
    open-in-view: true # LAZY의 늦은 세션이 가능하도록 함,View단까지 세션이 열려있음, EAGER 옵션
    hibernate:
      ddl-auto: update # update: DB Data Drop & Create New # 최초 Create 이후 update 또는 none으로 변경
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl #카멜표기 컬럼명 사용가능 @JoinColumn(name = "fromUserId")
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: true
    show-sql: true
  devtools:
    livereload:
      enabled: true
      freemarker:
        cache: false

#devtools:
#    livereload:
#      enabled: true
#    freemarker:
#      cache: false


logging:
  level:
    org.hibernate.SQL: debug    # Logger
    org.hibernate.type: trace   # Show Query Parameter
    org.hibernate.type.descriptor.sql: trace


file:
  path: D:/src/springbootwork-sts/upload/
#  path: /home/user/uploadImages/

# 프로필 이미지도 여기에 저장됨을 참고.
# 항상 "/"로 끝나도록 설정할 것


